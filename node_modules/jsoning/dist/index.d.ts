/// <reference types="node" resolution-mode="require"/>
import EventEmitter from "events";
export interface JSONValueArray extends Array<JSONValue> {
}
export interface JSONValueRecord extends Record<string, JSONValue> {
}
/**
 * Defines the types element values can be.
 * @typedef JSONValue
 * @type {(string|number|boolean|Record<string, JSONValue>|JSONValueArray|undefined|null)}
 */
export type JSONValue = string | number | boolean | JSONValueRecord | JSONValueArray | undefined | null;
/**
 * Defines the types element values can be.
 * @typedef JsoningOptions
 * @type {{ignoreJsonFileCheck?: boolean}}
 */
export type JsoningOptions = {
    /**
     * Whether to ignore if the file is not a JSON file. Default is `true`.
     * @type {boolean}
     */
    ignoreJsonFileCheck?: boolean;
};
/**
 * @enum {string} MathOps
 * @readonly
 */
export declare enum MathOps {
    Add = "add",
    Subtract = "subtract",
    Multiply = "multiply",
    Divide = "divide"
}
export declare enum Events {
    Get = "get",
    Set = "set",
    Delete = "delete",
    Clear = "clear",
    Push = "push",
    Remove = "remove",
    Copy = "copy"
}
/**
 * The main class exported by the module.
 * @extends EventEmitter
 */
export declare class Jsoning extends EventEmitter {
    /**
     * Emitted when the database is read.
     * @event Jsoning#get
     * @param {string} key The key of the element that was read.
     * @param {JSONValue} value The value of the element that was read.
     */
    /**
     * Emitted when an element is set.
     * @event Jsoning#set
     * @param {string} key The key of the element that was set.
     * @param {JSONValue} oldValue The old value of the element.
     * @param {JSONValue} newValue The new value of the element.
     */
    /**
     * Emitted when an element is deleted.
     * @event Jsoning#delete
     * @param {string} key The key of the element that was deleted.
     * @param {JSONValue} value The value of the element that was deleted.
     */
    /**
     * Emitted when the database is cleared.
     * @event Jsoning#clear
     * @param {Record<string, JSONValue>} data The data that was cleared.
     */
    /**
     * Emitted when a value is pushed to an array.
     * @event Jsoning#push
     * @param {string} key The key of the element that was pushed to.
     * @param {JSONValue} value The value that was pushed to the element.
     * @param {JSONValue[]} array The array that was pushed to (before modification).
     */
    /**
     * Emitted when a value is removed from an array.
     * @event Jsoning#remove
     * @param {string} key The key of the element that was removed from.
     * @param {JSONValue} value The value that was removed from the element (before modification).
     */
    /**
     * Emitted when the database is copied.
     * @event Jsoning#copy
     * @param {string} destination The path to which the database was copied.
     * @param {Record<string, JSONValue>} data The data that was copied.
     */
    database: string;
    options: JsoningOptions;
    /**
     * Create a new JSON file for storing or initialize an exisiting file to be used.
     * @param {string} database Path to the JSON file to be created or used.
     */
    constructor(database: string, options?: JsoningOptions);
    /**
     * Adds an element to the database with the given value. If element with the given key exists, element value is updated.
     * @param {string} key Key of the element to be set.
     * @param {JSONValue} value Value of the element to be set.
     * @returns {Promise<boolean>} If element is set/updated successfully, returns true; else false.
     * @fires Jsoning#set
     */
    set(key: string, value: JSONValue): Promise<boolean>;
    /**
     * Returns all the elements and their values of the JSON file.
     * @returns {Promise<Record<string, JSONValue>>} All the key-value pairs of the database.
     */
    all(): Promise<Record<string, JSONValue>>;
    /**
     * Deletes an element from the database based on its key.
     * @param {string} key The key of the element to be deleted.
     * @returns {Promise<boolean>} Returns true if the value exists, else returns false.
     */
    delete(key: string): Promise<boolean>;
    /**
     * Returns the value of an element by key.
     * @typeParam T The type of the value to be fetched.
     * @param {string} key The key of the element to be fetched.
     * @returns {Promise<JSONValue | null>} Returns value if element exists, else returns null.
     */
    get<T extends JSONValue>(key: string): Promise<T | null>;
    /**
     * Deletes the contents of the JSON file.
     * @returns {Promise<boolean>} Returns true if the file is cleared, else false.
     */
    clear(): Promise<boolean>;
    /**
     * Performs basic mathematical operations on values of elements.
     * @param {string} key The key of the element on which the mathematical operation is to be performed.
     * @param {MathOps} operation The operation to perform, one of add, subtract, multiply and divide.
     * @param {number} operand The number for performing the mathematical operation (the operand).
     * @returns {Promise<boolean>} True if the operation succeeded, else false.
     */
    math(key: string, operation: MathOps, operand: number): Promise<boolean>;
    /**
     * Check if a particular element exists by key.
     * @param {string} key The key of the element to see if the element exists.
     * @returns {Promise<boolean>} True if the element exists, false if the element doesn't exist.
     */
    has(key: string): Promise<boolean>;
    /**
     * Adds the given value into the provided element (if it's an array) in the database based on the key. If no such element exists, it will initialize a new element with an empty array.
     * @param {string} key The key of the element.
     * @param {JSONValue} value The value to be added to the element array.
     * @returns {Promise<true>} True if the the value was pushed to an array successfully, else false.
     */
    push(key: string, value: JSONValue): Promise<true>;
    /**
     * Removes a given primitive value from an array in the database based on the key. If the value does not exist or is not an array, it will do nothing.
     * @param {string} key The key of the element.
     * @param {JSONValue} value The value to be removed from the element array.
     * @returns {Promise<boolean>} True if successfully removed or not found or the key does not exist, else false.
     */
    remove(key: string, value: JSONValue): Promise<boolean>;
    /**
     * Copies the database to a new location.
     * @param {string} destination The path to copy the database to.
     */
    copy(destination: string): Promise<void>;
    /**
     * Copies the database to a new location and returns a new Jsoning instance with the copied database.
     * @param {string} destination The path to copy the database to.
     * @param {true} createInstance Returns a new Jsoning instance with the copied database.
     */
    copy(destination: string, createInstance: true): Promise<Jsoning>;
}
export default Jsoning;
